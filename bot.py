import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart

import os

API_TOKEN = "8179276423:AAHCWemkXe4taseLPaaoD2b6iafjKbxlPaw"
CHANNEL_ID = -1001954952198
ADMIN_ID = 1388312519
USERS_FILE = "users.txt"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì≤ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+Ix3uck7QcoUzZTUy")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è(-–ª–∞—Å—è)", callback_data="check_sub")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!\n\n"
        f"–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–µ–∫-–ª–∏—Å—Ç, —Å–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∞ –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        reply_markup=keyboard
    )

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
@dp.callback_query(lambda c: c.data == "check_sub")
async def check_subscription(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            # –ó–∞–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if not os.path.exists(USERS_FILE):
                with open(USERS_FILE, "w") as f: pass
            with open(USERS_FILE, "r") as f:
                users = f.read().splitlines()
            if str(user_id) not in users:
                with open(USERS_FILE, "a") as f:
                    f.write(str(user_id) + "\n")

            await callback_query.message.answer("–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É! –û—Å—å —Ç–≤—ñ–π —á–µ–∫-–ª–∏—Å—Ç:")
            file = FSInputFile("checklist200.pdf")
            await bot.send_document(chat_id=user_id, document=file)
        else:
            await callback_query.message.answer("–ó–¥–∞—î—Ç—å—Å—è, —Ç–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π(–Ω–∞). –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
    except Exception as e:
        await callback_query.message.answer("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
        print("Error:", e)

# –†–æ–∑—Å–∏–ª–∫–∞
@dp.message()
async def broadcast(message: types.Message):
    if message.from_user.id == ADMIN_ID and message.text.startswith("—Ä–æ–∑—Å–∏–ª–∫–∞:"):
        text = message.text.replace("—Ä–æ–∑—Å–∏–ª–∫–∞:", "").strip()
        if not text:
            await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è '—Ä–æ–∑—Å–∏–ª–∫–∞:'.")
            return
        if not os.path.exists(USERS_FILE):
            await message.answer("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
            return
        with open(USERS_FILE, "r") as f:
            users = f.read().splitlines()
        count = 0
        for user_id in users:
            try:
                await bot.send_message(chat_id=int(user_id), text=text)
                count += 1
            except:
                pass
        await message.answer(f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
    elif message.from_user.id == ADMIN_ID and message.text.lower() == "—Å—Ç–∞—Ç—Å":
        if not os.path.exists(USERS_FILE):
            await message.answer("–©–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        else:
            with open(USERS_FILE, "r") as f:
                users = f.read().splitlines()
            await message.answer(f"–£ –±–æ—Ç—ñ ‚Äî {len(users)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
